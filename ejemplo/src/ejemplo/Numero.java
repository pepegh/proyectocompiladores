/* The following code was generated by JFlex 1.7.0 */

/* archivo numero.jflex */
package ejemplo;


import java.util.ArrayList;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/ejemplo/numero.jflex</tt>
 */
class Numero implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\47\1\61\1\0\1\50\23\0\1\45\1\44\2\0"+
    "\1\31\2\0\1\36\1\37\1\27\1\3\1\0\1\1\1\4\1\30"+
    "\12\2\1\41\1\46\1\40\1\35\1\40\2\0\1\55\1\60\1\6"+
    "\1\52\1\56\10\6\2\52\2\6\1\57\10\6\1\42\1\0\1\43"+
    "\1\31\2\0\1\16\1\24\1\23\1\15\1\13\1\17\1\32\1\54"+
    "\1\26\2\6\1\7\1\33\1\21\1\10\1\11\1\6\1\14\1\20"+
    "\1\22\1\25\1\12\1\6\1\53\1\6\1\34\1\0\1\51\10\0"+
    "\1\61\u05da\0\12\5\206\0\12\5\306\0\12\5\u019c\0\12\5\166\0"+
    "\12\5\166\0\12\5\166\0\12\5\166\0\12\5\166\0\12\5\166\0"+
    "\12\5\166\0\12\5\166\0\12\5\166\0\12\5\140\0\12\5\166\0"+
    "\12\5\106\0\12\5\u0116\0\12\5\106\0\12\5\u0746\0\12\5\46\0"+
    "\12\5\u012c\0\12\5\200\0\12\5\246\0\12\5\6\0\12\5\266\0"+
    "\12\5\126\0\12\5\206\0\12\5\6\0\12\5\u03ce\0\1\61\1\61"+
    "\u85f6\0\12\5\u02a6\0\12\5\46\0\12\5\306\0\12\5\26\0\12\5"+
    "\126\0\12\5\u0196\0\12\5\u5316\0\12\5\u0586\0\12\5\u0bbc\0\12\5"+
    "\200\0\12\5\74\0\12\5\220\0\12\5\u0116\0\12\5\u0156\0\12\5"+
    "\166\0\12\5\u0176\0\12\5\146\0\12\5\146\0\12\5\u01a6\0\12\5"+
    "\u0366\0\12\5\u4e06\0\12\5\346\0\12\5\u6c74\0\62\5\u1150\0\12\5"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\16\4\3\2\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\1\2\15\2\16\1\4\1\17\1\0\1\20\2\0"+
    "\15\4\1\21\10\4\1\22\1\23\3\4\1\24\1\0"+
    "\35\4\1\0\14\4\1\25\1\26\3\4\1\27\12\4"+
    "\1\0\14\4\1\30\1\31\1\4\1\32\7\4\1\33"+
    "\1\34\14\4\1\25\23\4\1\35\1\4\1\36\2\4"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\4\4"+
    "\1\46\1\47\11\4\1\50\1\51\1\4\1\52\3\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\62\0\u041a\0\u044c"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\u044c"+
    "\0\62\0\u047e\0\62\0\372\0\u04b0\0\62\0\u04e2\0\62"+
    "\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992"+
    "\0\62\0\62\0\u09c4\0\u09f6\0\u0a28\0\u04e2\0\u0a5a\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c"+
    "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\372\0\372\0\u12c0\0\u12f2\0\u1324\0\372\0\u1356"+
    "\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\372\0\372"+
    "\0\u17d4\0\372\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900"+
    "\0\u1932\0\372\0\62\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c"+
    "\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc"+
    "\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c"+
    "\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc"+
    "\0\u1f0e\0\u1f40\0\u1f72\0\372\0\u1fa4\0\372\0\u1fd6\0\u2008"+
    "\0\372\0\372\0\372\0\372\0\372\0\372\0\372\0\u203a"+
    "\0\u206c\0\u209e\0\u20d0\0\372\0\372\0\u2102\0\u2134\0\u2166"+
    "\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292\0\372\0\372"+
    "\0\u22c4\0\372\0\u22f6\0\u2328\0\u235a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\2\1\6\1\7\1\6"+
    "\1\10\1\11\1\12\1\13\1\14\1\6\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\6\1\23\1\24\1\25"+
    "\1\26\1\6\1\27\1\6\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\2\41\1\42\1\43"+
    "\1\44\1\6\1\45\1\44\1\6\1\44\1\6\64\0"+
    "\1\46\1\4\61\0\1\4\1\0\1\47\57\0\1\4"+
    "\1\50\60\0\1\51\1\0\1\52\1\51\21\6\3\0"+
    "\3\6\15\0\7\6\3\0\1\51\1\0\1\52\1\51"+
    "\2\6\1\53\16\6\3\0\3\6\15\0\7\6\3\0"+
    "\1\51\1\0\1\52\1\51\6\6\1\54\10\6\1\55"+
    "\1\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\5\6\1\56\13\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\1\6\1\57"+
    "\10\6\1\60\1\61\5\6\3\0\3\6\15\0\1\6"+
    "\1\62\5\6\3\0\1\51\1\0\1\52\1\51\5\6"+
    "\1\63\2\6\1\64\10\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\5\6\1\65\13\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\10\6\1\66\10\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\5\6\1\67\12\6"+
    "\1\70\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\17\6\1\71\1\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\10\6\1\72"+
    "\10\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\1\6\1\73\1\74\5\6\1\75\10\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\2\6\1\76\16\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\13\6\1\77\5\6"+
    "\3\0\1\6\1\100\1\6\15\0\7\6\31\0\1\101"+
    "\60\0\2\102\33\0\1\51\1\0\1\52\1\51\5\6"+
    "\1\103\12\6\1\104\3\0\3\6\15\0\7\6\36\0"+
    "\1\33\73\0\1\41\14\0\1\51\1\0\1\52\1\51"+
    "\10\6\1\105\10\6\3\0\3\6\15\0\7\6\3\0"+
    "\1\106\2\0\1\106\56\0\1\51\1\0\1\52\1\51"+
    "\63\0\1\107\54\0\1\51\1\0\1\52\1\51\21\6"+
    "\3\0\1\110\2\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\2\6\1\111\15\6\1\112\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\16\6"+
    "\1\113\2\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\6\6\1\114\12\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\20\6"+
    "\1\115\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\14\6\1\116\1\117\3\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\14\6"+
    "\1\120\4\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\14\6\1\121\4\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\10\6"+
    "\1\122\10\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\20\6\1\123\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\4\6\1\124"+
    "\5\6\1\125\6\6\3\0\3\6\15\0\7\6\3\0"+
    "\1\51\1\0\1\52\1\51\1\6\1\126\17\6\3\0"+
    "\3\6\15\0\7\6\3\0\1\51\1\0\1\52\1\51"+
    "\13\6\1\127\5\6\3\0\3\6\15\0\7\6\3\0"+
    "\1\51\1\0\1\52\1\51\13\6\1\130\5\6\3\0"+
    "\3\6\15\0\7\6\3\0\1\51\1\0\1\52\1\51"+
    "\1\6\1\131\17\6\3\0\3\6\15\0\7\6\3\0"+
    "\1\51\1\0\1\52\1\51\13\6\1\132\5\6\3\0"+
    "\3\6\15\0\7\6\3\0\1\51\1\0\1\52\1\51"+
    "\10\6\1\133\10\6\3\0\3\6\15\0\7\6\3\0"+
    "\1\51\1\0\1\52\1\51\12\6\1\134\6\6\3\0"+
    "\3\6\15\0\7\6\3\0\1\51\1\0\1\52\1\51"+
    "\7\6\1\135\11\6\3\0\3\6\15\0\7\6\3\0"+
    "\1\51\1\0\1\52\1\51\2\6\1\136\16\6\3\0"+
    "\3\6\15\0\7\6\3\0\1\51\1\0\1\52\1\51"+
    "\12\6\1\137\2\6\1\140\3\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\3\6\1\141"+
    "\15\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\14\6\1\142\4\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\5\6\1\143"+
    "\13\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\15\6\1\144\3\6\3\0\3\6\15\0"+
    "\7\6\11\0\1\145\53\0\1\51\1\0\1\52\1\51"+
    "\10\6\1\146\10\6\3\0\3\6\15\0\7\6\3\0"+
    "\1\51\1\0\1\52\1\51\3\6\1\147\10\6\1\150"+
    "\4\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\4\6\1\151\14\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\1\6\1\152"+
    "\17\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\7\6\1\153\11\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\21\6\3\0"+
    "\1\6\1\154\1\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\10\6\1\155\10\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\6\6\1\156"+
    "\12\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\2\6\1\157\2\6\1\160\13\6\3\0"+
    "\3\6\15\0\7\6\3\0\1\51\1\0\1\52\1\51"+
    "\20\6\1\161\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\1\6\1\162\17\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\21\6"+
    "\3\0\2\6\1\163\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\2\6\1\164\16\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\7\6\1\165"+
    "\11\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\12\6\1\166\6\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\2\6\1\163"+
    "\16\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\2\6\1\167\16\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\2\6\1\162"+
    "\16\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\21\6\3\0\1\170\2\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\12\6\1\171\6\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\5\6\1\67\13\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\5\6\1\172\13\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\1\6\1\173\17\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\14\6\1\174\4\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\1\6\1\175\17\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\2\6\1\176\16\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\2\6\1\177\16\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\13\6\1\200\5\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\5\6\1\201\13\6\3\0\3\6\15\0\7\6"+
    "\11\0\1\202\53\0\1\51\1\0\1\52\1\51\6\6"+
    "\1\203\12\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\20\6\1\204\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\5\6\1\205"+
    "\13\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\10\6\1\206\10\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\20\6\1\207"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\10\6\1\210\10\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\20\6\1\211\3\0"+
    "\3\6\15\0\7\6\3\0\1\51\1\0\1\52\1\51"+
    "\14\6\1\212\4\6\3\0\3\6\15\0\7\6\3\0"+
    "\1\51\1\0\1\52\1\51\20\6\1\213\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\13\6"+
    "\1\214\5\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\6\6\1\131\12\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\5\6"+
    "\1\215\13\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\1\6\1\216\17\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\5\6"+
    "\1\217\13\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\2\6\1\220\16\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\5\6"+
    "\1\221\13\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\5\6\1\222\13\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\13\6"+
    "\1\223\5\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\5\6\1\224\13\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\10\6"+
    "\1\225\10\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\17\6\1\226\1\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\6\6"+
    "\1\227\12\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\7\6\1\230\11\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\14\6"+
    "\1\231\4\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\6\6\1\232\12\6\3\0\3\6"+
    "\15\0\7\6\12\0\1\233\52\0\1\51\1\0\1\52"+
    "\1\51\20\6\1\234\3\0\3\6\15\0\7\6\3\0"+
    "\1\51\1\0\1\52\1\51\5\6\1\235\13\6\3\0"+
    "\3\6\15\0\7\6\3\0\1\51\1\0\1\52\1\51"+
    "\21\6\3\0\1\236\2\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\7\6\1\237\11\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\15\6"+
    "\1\237\3\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\7\6\1\240\11\6\3\0\3\6"+
    "\15\0\7\6\3\0\1\51\1\0\1\52\1\51\13\6"+
    "\1\241\5\6\3\0\3\6\15\0\7\6\3\0\1\51"+
    "\1\0\1\52\1\51\20\6\1\242\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\16\6\1\243"+
    "\2\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\15\6\1\244\3\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\13\6\1\245"+
    "\5\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\4\6\1\246\14\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\13\6\1\247"+
    "\5\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\10\6\1\250\10\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\10\6\1\251"+
    "\10\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\13\6\1\252\5\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\20\6\1\253"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\14\6\1\254\4\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\2\6\1\255\16\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\6\6\1\256\12\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\14\6\1\257\4\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\7\6\1\260\11\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\20\6\1\206\3\0"+
    "\3\6\15\0\7\6\3\0\1\51\1\0\1\52\1\51"+
    "\2\6\1\261\5\6\1\261\10\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\5\6\1\262"+
    "\13\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\10\6\1\263\10\6\3\0\3\6\15\0"+
    "\7\6\3\0\1\51\1\0\1\52\1\51\15\6\1\264"+
    "\3\6\3\0\3\6\15\0\7\6\3\0\1\51\1\0"+
    "\1\52\1\51\20\6\1\265\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\5\6\1\266\13\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\7\6\1\267\11\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\5\6\1\270\13\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\14\6\1\271\4\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\21\6\3\0\3\6"+
    "\15\0\3\6\1\272\3\6\3\0\1\51\1\0\1\52"+
    "\1\51\13\6\1\131\5\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\15\6\1\273\3\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\6\6\1\274\12\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\10\6\1\275\10\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\12\6\1\276\6\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\10\6\1\277\10\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\21\6\3\0\1\6\1\127\1\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\10\6\1\300\10\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\12\6\1\301\6\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\6\6\1\166\12\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\6\6\1\302\12\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\2\6\1\303\16\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\6\6\1\304\12\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\12\6\1\305\6\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\5\6\1\306\13\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\6\6\1\307\12\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\5\6\1\163\13\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\21\6\3\0\3\6"+
    "\15\0\4\6\1\310\1\311\1\312\3\0\1\51\1\0"+
    "\1\52\1\51\20\6\1\313\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\6\6\1\314\12\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\12\6\1\315\6\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\7\6\1\316\11\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\13\6\1\317\5\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\5\6\1\320\13\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\2\6\1\321\16\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\10\6\1\322\10\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\5\6\1\323\13\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\14\6\1\324\4\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\10\6\1\325\10\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\1\6\1\326\17\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\6\6\1\327\12\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\12\6\1\330\6\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\5\6\1\331\13\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\1\6\1\332\17\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\5\6\1\333\13\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\6\6\1\334\12\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\10\6\1\335\10\6\3\0\3\6\15\0\7\6"+
    "\3\0\1\51\1\0\1\52\1\51\2\6\1\332\16\6"+
    "\3\0\3\6\15\0\7\6\3\0\1\51\1\0\1\52"+
    "\1\51\13\6\1\334\5\6\3\0\3\6\15\0\7\6"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\1\11\2\1\7\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\0\1\11\2\0\26\1"+
    "\2\11\4\1\1\0\35\1\1\0\34\1\1\0\30\1"+
    "\1\11\102\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  public boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<Token> tokens;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Numero(java.io.Reader in) {
      this.tokens = new ArrayList<>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 392) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 43: break;
          case 2: 
            { System.out.println("Encontre un Simbolo aritmetico: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("simaritmetico",yytext()));
            } 
            // fall through
          case 44: break;
          case 3: 
            { System.out.println("Encontre un Entero: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("entero",yytext()));
            } 
            // fall through
          case 45: break;
          case 4: 
            { System.out.println("Encontre una Cadena: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("cadena",yytext()));
            } 
            // fall through
          case 46: break;
          case 5: 
            { System.out.println("Encontre una Asignacion: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("asignacion",yytext()));
            } 
            // fall through
          case 47: break;
          case 6: 
            { System.out.println("Encontre una Abertura de parentesis: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("openpar",yytext()));
    return new Symbol(sym.OPENPAR);
            } 
            // fall through
          case 48: break;
          case 7: 
            { System.out.println("Encontre un Cierre de parentesis: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("closepar",yytext()));
    return new Symbol(sym.CLOSEPAR);
            } 
            // fall through
          case 49: break;
          case 8: 
            { System.out.println("Encontre una Condicion: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("condicion",yytext()));
            } 
            // fall through
          case 50: break;
          case 9: 
            { System.out.println("Encontre Dos puntos: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("dospuntos",yytext()));
            } 
            // fall through
          case 51: break;
          case 10: 
            { System.out.println("Encontre una apertura de corchetes: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("opencorch",yytext()));
            } 
            // fall through
          case 52: break;
          case 11: 
            { System.out.println("Encontre un cierre de corchetes: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("closecorch",yytext()));
            } 
            // fall through
          case 53: break;
          case 12: 
            { System.out.println("Encontre una Comilla: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("comilla",yytext()));
            } 
            // fall through
          case 54: break;
          case 13: 
            { System.out.println("Encontre un Fin de linea: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("fi",yytext()));
            } 
            // fall through
          case 55: break;
          case 14: 
            { System.out.println("Encontre un operador logico: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("operadorlogico",yytext()));
            } 
            // fall through
          case 56: break;
          case 15: 
            { System.out.println("Encontre un Decremento: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("decremento",yytext()));
            } 
            // fall through
          case 57: break;
          case 16: 
            { System.out.println("Encontre un Incremento: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("incremento",yytext()));
            } 
            // fall through
          case 58: break;
          case 17: 
            { System.out.println("Encontre un Si: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("if",yytext()));
            } 
            // fall through
          case 59: break;
          case 18: 
            { System.out.println("Encontre un Cierre de comentario: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("closecom",yytext()));
            } 
            // fall through
          case 60: break;
          case 19: 
            { System.out.println("Encontre Apertura de comentario: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("opencom",yytext()));
            } 
            // fall through
          case 61: break;
          case 20: 
            { System.out.println("Encontre un Real: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("real",yytext()));
            } 
            // fall through
          case 62: break;
          case 21: 
            { System.out.println("Encontre un tipo de variable: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("TipoVariable",yytext()));
            } 
            // fall through
          case 63: break;
          case 22: 
            { System.out.println("Encontre una funcion matematica: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("funcmath",yytext()));
            } 
            // fall through
          case 64: break;
          case 23: 
            { System.out.println("Encontre un Sino: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("else",yytext()));
            } 
            // fall through
          case 65: break;
          case 24: 
            { System.out.println("Encontre un Desde: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("for",yytext()));
            } 
            // fall through
          case 66: break;
          case 25: 
            { System.out.println("Encontre un Booleano: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("booleano",yytext()));
            } 
            // fall through
          case 67: break;
          case 26: 
            { System.out.println("Encontre un declaracion de clase: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("class",yytext()));
            } 
            // fall through
          case 68: break;
          case 27: 
            { System.out.println("Encontre un Hacer: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("do",yytext()));
            } 
            // fall through
          case 69: break;
          case 28: 
            { System.out.println("Encontre un Archivo: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("file",yytext()));
            } 
            // fall through
          case 70: break;
          case 29: 
            { System.out.println("Encontre una Inclucion: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("include",yytext()));
            } 
            // fall through
          case 71: break;
          case 30: 
            { System.out.println("Encontre una declaracion de metodos: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("methods",yytext()));
            } 
            // fall through
          case 72: break;
          case 31: 
            { System.out.println("Encontre un tipo de acceso: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("tipoacceso",yytext()));
            } 
            // fall through
          case 73: break;
          case 32: 
            { System.out.println("Encontre una Eliminacion: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("delete",yytext()));
            } 
            // fall through
          case 74: break;
          case 33: 
            { System.out.println("Encontre un Estatico: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("static",yytext()));
            } 
            // fall through
          case 75: break;
          case 34: 
            { System.out.println("Encontre un Escribir: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("print",yytext()));
            } 
            // fall through
          case 76: break;
          case 35: 
            { System.out.println("Encontre un Entonces: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("then",yytext()));
            } 
            // fall through
          case 77: break;
          case 36: 
            { System.out.println("Encontre un extends: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("extends",yytext()));
            } 
            // fall through
          case 78: break;
          case 37: 
            { System.out.println("Encontre un Retorno: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("return",yytext()));
            } 
            // fall through
          case 79: break;
          case 38: 
            { System.out.println("Encontre una Importacion: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("import",yytext()));
            } 
            // fall through
          case 80: break;
          case 39: 
            { System.out.println("Encontre un Mientras: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("while",yytext()));
            } 
            // fall through
          case 81: break;
          case 40: 
            { System.out.println("Encontre una Instanciacion: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("instance",yytext()));
            } 
            // fall through
          case 82: break;
          case 41: 
            { System.out.println("Encontre una declaracion de propiedades: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("props",yytext()));
            } 
            // fall through
          case 83: break;
          case 42: 
            { System.out.println("Encontre una Conversion: " + yytext());
    System.out.println("Encontrado en :" + yyline + "-" + yycolumn);
    tokens.add(new Token("funconversion",yytext()));
            } 
            // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
